/**
 * @fileoverview added by tsickle
 * Generated from: services/permissions.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { from, fromEvent, Observable } from 'rxjs';
import { map, shareReplay, startWith, switchMap } from 'rxjs/operators';
import { PERMISSIONS } from '../tokens/permissions';
import { PERMISSIONS_SUPPORT } from '../tokens/permissions-support';
import * as i0 from "@angular/core";
import * as i1 from "../tokens/permissions";
import * as i2 from "../tokens/permissions-support";
// @dynamic
export class PermissionsService {
    /**
     * @param {?} permissions
     * @param {?} permissionsSupported
     */
    constructor(permissions, permissionsSupported) {
        this.permissions = permissions;
        this.permissionsSupported = permissionsSupported;
    }
    /**
     * @param {?} nameOrDescriptor
     * @return {?}
     */
    state(nameOrDescriptor) {
        /** @type {?} */
        const descriptor = typeof nameOrDescriptor === 'string'
            ? { name: nameOrDescriptor }
            : nameOrDescriptor;
        return new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        subscriber => {
            if (!this.permissionsSupported) {
                subscriber.error('Permissions is not supported in your browser');
                return;
            }
            return from(this.permissions.query(descriptor))
                .pipe(switchMap((/**
             * @param {?} status
             * @return {?}
             */
            status => fromEvent(status, 'change').pipe(startWith(null), map((/**
             * @return {?}
             */
            () => status.state))))))
                .subscribe(subscriber);
        })).pipe(shareReplay({ bufferSize: 1, refCount: true }));
    }
}
PermissionsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
PermissionsService.ctorParameters = () => [
    { type: Permissions, decorators: [{ type: Inject, args: [PERMISSIONS,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [PERMISSIONS_SUPPORT,] }] }
];
/** @nocollapse */ PermissionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PermissionsService_Factory() { return new PermissionsService(i0.ɵɵinject(i1.PERMISSIONS), i0.ɵɵinject(i2.PERMISSIONS_SUPPORT)); }, token: PermissionsService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    PermissionsService.prototype.permissions;
    /**
     * @type {?}
     * @private
     */
    PermissionsService.prototype.permissionsSupported;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy13ZWItYXBpcy9wZXJtaXNzaW9ucy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3Blcm1pc3Npb25zLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RFLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQzs7Ozs7QUFRbEUsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7SUFDM0IsWUFDMEMsV0FBd0IsRUFDekIsb0JBQTZCO1FBRDVCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3pCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBUztJQUNuRSxDQUFDOzs7OztJQUlKLEtBQUssQ0FDRCxnQkFBdUQ7O2NBRWpELFVBQVUsR0FDWixPQUFPLGdCQUFnQixLQUFLLFFBQVE7WUFDaEMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFDO1lBQzFCLENBQUMsQ0FBQyxnQkFBZ0I7UUFFMUIsT0FBTyxJQUFJLFVBQVU7Ozs7UUFBa0IsVUFBVSxDQUFDLEVBQUU7WUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtnQkFDNUIsVUFBVSxDQUFDLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO2dCQUVqRSxPQUFPO2FBQ1Y7WUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDMUMsSUFBSSxDQUNELFNBQVM7Ozs7WUFBQyxNQUFNLENBQUMsRUFBRSxDQUNmLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUM1QixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ2YsR0FBRzs7O1lBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBQyxDQUMxQixFQUNKLENBQ0o7aUJBQ0EsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9CLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7O1lBckNKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7OztZQUcwRCxXQUFXLHVCQUE3RCxNQUFNLFNBQUMsV0FBVzswQ0FDbEIsTUFBTSxTQUFDLG1CQUFtQjs7Ozs7Ozs7SUFEM0IseUNBQThEOzs7OztJQUM5RCxrREFBa0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2Zyb20sIGZyb21FdmVudCwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcCwgc2hhcmVSZXBsYXksIHN0YXJ0V2l0aCwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1BFUk1JU1NJT05TfSBmcm9tICcuLi90b2tlbnMvcGVybWlzc2lvbnMnO1xuaW1wb3J0IHtQRVJNSVNTSU9OU19TVVBQT1JUfSBmcm9tICcuLi90b2tlbnMvcGVybWlzc2lvbnMtc3VwcG9ydCc7XG5cbmV4cG9ydCB0eXBlIFBlcm1pc3Npb25zUXVlcnlBcmdzID0gUGFyYW1ldGVyczx0eXBlb2YgUGVybWlzc2lvbnMucHJvdG90eXBlLnF1ZXJ5PlswXTtcblxuLy8gQGR5bmFtaWNcbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25zU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoUEVSTUlTU0lPTlMpIHByaXZhdGUgcmVhZG9ubHkgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zLFxuICAgICAgICBASW5qZWN0KFBFUk1JU1NJT05TX1NVUFBPUlQpIHByaXZhdGUgcGVybWlzc2lvbnNTdXBwb3J0ZWQ6IGJvb2xlYW4sXG4gICAgKSB7fVxuXG4gICAgc3RhdGUobmFtZTogUGVybWlzc2lvbk5hbWUpOiBPYnNlcnZhYmxlPFBlcm1pc3Npb25TdGF0ZT47XG4gICAgc3RhdGUoZGVzY3JpcHRvcjogUGVybWlzc2lvbnNRdWVyeUFyZ3MpOiBPYnNlcnZhYmxlPFBlcm1pc3Npb25TdGF0ZT47XG4gICAgc3RhdGUoXG4gICAgICAgIG5hbWVPckRlc2NyaXB0b3I6IFBlcm1pc3Npb25OYW1lIHwgUGVybWlzc2lvbnNRdWVyeUFyZ3MsXG4gICAgKTogT2JzZXJ2YWJsZTxQZXJtaXNzaW9uU3RhdGU+IHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvcjogUGVybWlzc2lvbkRlc2NyaXB0b3IgPVxuICAgICAgICAgICAgdHlwZW9mIG5hbWVPckRlc2NyaXB0b3IgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyB7bmFtZTogbmFtZU9yRGVzY3JpcHRvcn1cbiAgICAgICAgICAgICAgICA6IG5hbWVPckRlc2NyaXB0b3I7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPFBlcm1pc3Npb25TdGF0ZT4oc3Vic2NyaWJlciA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGVybWlzc2lvbnNTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKCdQZXJtaXNzaW9ucyBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgYnJvd3NlcicpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnBlcm1pc3Npb25zLnF1ZXJ5KGRlc2NyaXB0b3IpKVxuICAgICAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoc3RhdHVzID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tRXZlbnQoc3RhdHVzLCAnY2hhbmdlJykucGlwZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFdpdGgobnVsbCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwKCgpID0+IHN0YXR1cy5zdGF0ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9KS5waXBlKHNoYXJlUmVwbGF5KHtidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZX0pKTtcbiAgICB9XG59XG4iXX0=