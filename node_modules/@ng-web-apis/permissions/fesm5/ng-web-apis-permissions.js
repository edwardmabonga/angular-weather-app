import { InjectionToken, inject, Injectable, Inject, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';
import { Observable, from, fromEvent } from 'rxjs';
import { switchMap, startWith, map, shareReplay } from 'rxjs/operators';
import { NAVIGATOR } from '@ng-web-apis/common';

/**
 * @fileoverview added by tsickle
 * Generated from: tokens/permissions.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PERMISSIONS = new InjectionToken('An abstraction over window.navigator.permissions object', {
    factory: (/**
     * @return {?}
     */
    function () { return inject(NAVIGATOR).permissions; }),
});

/**
 * @fileoverview added by tsickle
 * Generated from: tokens/permissions-support.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var PERMISSIONS_SUPPORT = new InjectionToken('Is Permissions API supported?', {
    factory: (/**
     * @return {?}
     */
    function () {
        return !!inject(PERMISSIONS);
    }),
});

/**
 * @fileoverview added by tsickle
 * Generated from: services/permissions.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var PermissionsService = /** @class */ (function () {
    function PermissionsService(permissions, permissionsSupported) {
        this.permissions = permissions;
        this.permissionsSupported = permissionsSupported;
    }
    /**
     * @param {?} nameOrDescriptor
     * @return {?}
     */
    PermissionsService.prototype.state = /**
     * @param {?} nameOrDescriptor
     * @return {?}
     */
    function (nameOrDescriptor) {
        var _this = this;
        /** @type {?} */
        var descriptor = typeof nameOrDescriptor === 'string'
            ? { name: nameOrDescriptor }
            : nameOrDescriptor;
        return new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        function (subscriber) {
            if (!_this.permissionsSupported) {
                subscriber.error('Permissions is not supported in your browser');
                return;
            }
            return from(_this.permissions.query(descriptor))
                .pipe(switchMap((/**
             * @param {?} status
             * @return {?}
             */
            function (status) {
                return fromEvent(status, 'change').pipe(startWith(null), map((/**
                 * @return {?}
                 */
                function () { return status.state; })));
            })))
                .subscribe(subscriber);
        })).pipe(shareReplay({ bufferSize: 1, refCount: true }));
    };
    PermissionsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    PermissionsService.ctorParameters = function () { return [
        { type: Permissions, decorators: [{ type: Inject, args: [PERMISSIONS,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [PERMISSIONS_SUPPORT,] }] }
    ]; };
    /** @nocollapse */ PermissionsService.ɵprov = ɵɵdefineInjectable({ factory: function PermissionsService_Factory() { return new PermissionsService(ɵɵinject(PERMISSIONS), ɵɵinject(PERMISSIONS_SUPPORT)); }, token: PermissionsService, providedIn: "root" });
    return PermissionsService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    PermissionsService.prototype.permissions;
    /**
     * @type {?}
     * @private
     */
    PermissionsService.prototype.permissionsSupported;
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ng-web-apis-permissions.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { PERMISSIONS, PERMISSIONS_SUPPORT, PermissionsService };
//# sourceMappingURL=ng-web-apis-permissions.js.map
