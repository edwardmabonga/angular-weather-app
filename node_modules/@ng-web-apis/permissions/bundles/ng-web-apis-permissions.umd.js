(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@ng-web-apis/common')) :
    typeof define === 'function' && define.amd ? define('@ng-web-apis/permissions', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@ng-web-apis/common'], factory) :
    (global = global || self, factory((global['ng-web-apis'] = global['ng-web-apis'] || {}, global['ng-web-apis'].permissions = {}), global.ng.core, global.rxjs, global.rxjs.operators, global.common));
}(this, (function (exports, core, rxjs, operators, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: tokens/permissions.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PERMISSIONS = new core.InjectionToken('An abstraction over window.navigator.permissions object', {
        factory: (/**
         * @return {?}
         */
        function () { return core.inject(common.NAVIGATOR).permissions; }),
    });

    /**
     * @fileoverview added by tsickle
     * Generated from: tokens/permissions-support.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PERMISSIONS_SUPPORT = new core.InjectionToken('Is Permissions API supported?', {
        factory: (/**
         * @return {?}
         */
        function () {
            return !!core.inject(PERMISSIONS);
        }),
    });

    /**
     * @fileoverview added by tsickle
     * Generated from: services/permissions.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // @dynamic
    var PermissionsService = /** @class */ (function () {
        function PermissionsService(permissions, permissionsSupported) {
            this.permissions = permissions;
            this.permissionsSupported = permissionsSupported;
        }
        /**
         * @param {?} nameOrDescriptor
         * @return {?}
         */
        PermissionsService.prototype.state = /**
         * @param {?} nameOrDescriptor
         * @return {?}
         */
        function (nameOrDescriptor) {
            var _this = this;
            /** @type {?} */
            var descriptor = typeof nameOrDescriptor === 'string'
                ? { name: nameOrDescriptor }
                : nameOrDescriptor;
            return new rxjs.Observable((/**
             * @param {?} subscriber
             * @return {?}
             */
            function (subscriber) {
                if (!_this.permissionsSupported) {
                    subscriber.error('Permissions is not supported in your browser');
                    return;
                }
                return rxjs.from(_this.permissions.query(descriptor))
                    .pipe(operators.switchMap((/**
                 * @param {?} status
                 * @return {?}
                 */
                function (status) {
                    return rxjs.fromEvent(status, 'change').pipe(operators.startWith(null), operators.map((/**
                     * @return {?}
                     */
                    function () { return status.state; })));
                })))
                    .subscribe(subscriber);
            })).pipe(operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        PermissionsService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        PermissionsService.ctorParameters = function () { return [
            { type: Permissions, decorators: [{ type: core.Inject, args: [PERMISSIONS,] }] },
            { type: Boolean, decorators: [{ type: core.Inject, args: [PERMISSIONS_SUPPORT,] }] }
        ]; };
        /** @nocollapse */ PermissionsService.ɵprov = core.ɵɵdefineInjectable({ factory: function PermissionsService_Factory() { return new PermissionsService(core.ɵɵinject(PERMISSIONS), core.ɵɵinject(PERMISSIONS_SUPPORT)); }, token: PermissionsService, providedIn: "root" });
        return PermissionsService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        PermissionsService.prototype.permissions;
        /**
         * @type {?}
         * @private
         */
        PermissionsService.prototype.permissionsSupported;
    }

    exports.PERMISSIONS = PERMISSIONS;
    exports.PERMISSIONS_SUPPORT = PERMISSIONS_SUPPORT;
    exports.PermissionsService = PermissionsService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-web-apis-permissions.umd.js.map
