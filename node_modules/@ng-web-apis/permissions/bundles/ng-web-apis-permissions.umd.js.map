{"version":3,"file":"ng-web-apis-permissions.umd.js","sources":["ng://@ng-web-apis/permissions/tokens/permissions.ts","ng://@ng-web-apis/permissions/tokens/permissions-support.ts","ng://@ng-web-apis/permissions/services/permissions.service.ts"],"sourcesContent":["import {inject, InjectionToken} from '@angular/core';\nimport {NAVIGATOR} from '@ng-web-apis/common';\n\nexport const PERMISSIONS = new InjectionToken<Permissions>(\n    'An abstraction over window.navigator.permissions object',\n    {\n        factory: () => inject(NAVIGATOR).permissions,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\nimport {PERMISSIONS} from './permissions';\n\nexport const PERMISSIONS_SUPPORT = new InjectionToken<boolean>(\n    'Is Permissions API supported?',\n    {\n        factory: () => {\n            return !!inject(PERMISSIONS);\n        },\n    },\n);\n","import {Inject, Injectable} from '@angular/core';\nimport {from, fromEvent, Observable} from 'rxjs';\nimport {map, shareReplay, startWith, switchMap} from 'rxjs/operators';\nimport {PERMISSIONS} from '../tokens/permissions';\nimport {PERMISSIONS_SUPPORT} from '../tokens/permissions-support';\n\nexport type PermissionsQueryArgs = Parameters<typeof Permissions.prototype.query>[0];\n\n// @dynamic\n@Injectable({\n    providedIn: 'root',\n})\nexport class PermissionsService {\n    constructor(\n        @Inject(PERMISSIONS) private readonly permissions: Permissions,\n        @Inject(PERMISSIONS_SUPPORT) private permissionsSupported: boolean,\n    ) {}\n\n    state(name: PermissionName): Observable<PermissionState>;\n    state(descriptor: PermissionsQueryArgs): Observable<PermissionState>;\n    state(\n        nameOrDescriptor: PermissionName | PermissionsQueryArgs,\n    ): Observable<PermissionState> {\n        const descriptor: PermissionDescriptor =\n            typeof nameOrDescriptor === 'string'\n                ? {name: nameOrDescriptor}\n                : nameOrDescriptor;\n\n        return new Observable<PermissionState>(subscriber => {\n            if (!this.permissionsSupported) {\n                subscriber.error('Permissions is not supported in your browser');\n\n                return;\n            }\n\n            return from(this.permissions.query(descriptor))\n                .pipe(\n                    switchMap(status =>\n                        fromEvent(status, 'change').pipe(\n                            startWith(null),\n                            map(() => status.state),\n                        ),\n                    ),\n                )\n                .subscribe(subscriber);\n        }).pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n}\n"],"names":["InjectionToken","inject","NAVIGATOR","Observable","from","switchMap","fromEvent","startWith","map","shareReplay","Injectable","Inject"],"mappings":";;;;;;;;;;;;QAGa,WAAW,GAAG,IAAIA,mBAAc,CACzC,yDAAyD,EACzD;QACI,OAAO;;;QAAE,cAAM,OAAAC,WAAM,CAACC,gBAAS,CAAC,CAAC,WAAW,GAAA,CAAA;KAC/C;;;;;;;;QCJQ,mBAAmB,GAAG,IAAIF,mBAAc,CACjD,+BAA+B,EAC/B;QACI,OAAO;;;QAAE;YACL,OAAO,CAAC,CAACC,WAAM,CAAC,WAAW,CAAC,CAAC;SAChC,CAAA;KACJ;;;;;;;;;QCID,4BAC0C,WAAwB,EACzB,oBAA6B;YAD5B,gBAAW,GAAX,WAAW,CAAa;YACzB,yBAAoB,GAApB,oBAAoB,CAAS;SAClE;;;;;QAIJ,kCAAK;;;;QAAL,UACI,gBAAuD;YAD3D,iBA0BC;;gBAvBS,UAAU,GACZ,OAAO,gBAAgB,KAAK,QAAQ;kBAC9B,EAAC,IAAI,EAAE,gBAAgB,EAAC;kBACxB,gBAAgB;YAE1B,OAAO,IAAIE,eAAU;;;;YAAkB,UAAA,UAAU;gBAC7C,IAAI,CAAC,KAAI,CAAC,oBAAoB,EAAE;oBAC5B,UAAU,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;oBAEjE,OAAO;iBACV;gBAED,OAAOC,SAAI,CAAC,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;qBAC1C,IAAI,CACDC,mBAAS;;;;gBAAC,UAAA,MAAM;oBACZ,OAAAC,cAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,IAAI,CAC5BC,mBAAS,CAAC,IAAI,CAAC,EACfC,aAAG;;;oBAAC,cAAM,OAAA,MAAM,CAAC,KAAK,GAAA,EAAC,CAC1B;iBAAA,EACJ,CACJ;qBACA,SAAS,CAAC,UAAU,CAAC,CAAC;aAC9B,EAAC,CAAC,IAAI,CAACC,qBAAW,CAAC,EAAC,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;SACzD;;oBArCJC,eAAU,SAAC;wBACR,UAAU,EAAE,MAAM;qBACrB;;;;oBAG0D,WAAW,uBAA7DC,WAAM,SAAC,WAAW;kDAClBA,WAAM,SAAC,mBAAmB;;;iCAfnC;KASA,IAsCC;;;;;;QAjCO,yCAA8D;;;;;QAC9D,kDAAkE;;;;;;;;;;;;;;;"}