{"version":3,"sources":["ng://@ng-web-apis/permissions/tokens/permissions.ts","ng://@ng-web-apis/permissions/tokens/permissions-support.ts","ng://@ng-web-apis/permissions/services/permissions.service.ts"],"names":["PERMISSIONS","InjectionToken","factory","inject","NAVIGATOR","permissions","PERMISSIONS_SUPPORT","PermissionsService","permissionsSupported","this","prototype","state","nameOrDescriptor","_this","descriptor","name","Observable","subscriber","from","query","pipe","switchMap","status","fromEvent","startWith","map","subscribe","error","shareReplay","bufferSize","refCount","Injectable","args","providedIn","Permissions","decorators","type","Inject"],"mappings":"kfAGaA,EAAc,IAAIC,EAAAA,eAC3B,0DACA,CACIC,QAAO,WAAQ,OAAAC,EAAAA,OAAOC,EAAAA,WAAWC,eCH5BC,EAAsB,IAAIL,EAAAA,eACnC,gCACA,CACIC,QAAO,WACH,QAASC,EAAAA,OAAOH,mBCMxB,SAAAO,EAC0CF,EACDG,GADCC,KAAAJ,YAAAA,EACDI,KAAAD,qBAAAA,SAKzCD,EAAAG,UAAAC,MAAA,SACIC,GADJ,IAAAC,EAAAJ,KAGUK,EAC0B,iBAArBF,EACD,CAACG,KAAMH,GACPA,EAEV,OAAO,IAAII,EAAAA,YAAU,SAAkBC,GACnC,GAAKJ,EAAKL,qBAMV,OAAOU,EAAAA,KAAKL,EAAKR,YAAYc,MAAML,IAC9BM,KACGC,EAAAA,WAAS,SAACC,GACN,OAAAC,EAAAA,UAAUD,EAAQ,UAAUF,KACxBI,EAAAA,UAAU,MACVC,EAAAA,KAAG,WAAO,OAAAH,EAAOX,cAI5Be,UAAUT,GAdXA,EAAWU,MAAM,mDAetBP,KAAKQ,EAAAA,YAAY,CAACC,WAAY,EAAGC,UAAU,0BApCrDC,EAAAA,WAAUC,KAAA,CAAC,CACRC,WAAY,oDAI2CC,YAAWC,WAAA,CAAA,CAAAC,KAA7DC,EAAAA,OAAML,KAAA,CAAChC,sCACPqC,EAAAA,OAAML,KAAA,CAAC1B","sourcesContent":["import {inject, InjectionToken} from '@angular/core';\nimport {NAVIGATOR} from '@ng-web-apis/common';\n\nexport const PERMISSIONS = new InjectionToken<Permissions>(\n    'An abstraction over window.navigator.permissions object',\n    {\n        factory: () => inject(NAVIGATOR).permissions,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\nimport {PERMISSIONS} from './permissions';\n\nexport const PERMISSIONS_SUPPORT = new InjectionToken<boolean>(\n    'Is Permissions API supported?',\n    {\n        factory: () => {\n            return !!inject(PERMISSIONS);\n        },\n    },\n);\n","import {Inject, Injectable} from '@angular/core';\nimport {from, fromEvent, Observable} from 'rxjs';\nimport {map, shareReplay, startWith, switchMap} from 'rxjs/operators';\nimport {PERMISSIONS} from '../tokens/permissions';\nimport {PERMISSIONS_SUPPORT} from '../tokens/permissions-support';\n\nexport type PermissionsQueryArgs = Parameters<typeof Permissions.prototype.query>[0];\n\n// @dynamic\n@Injectable({\n    providedIn: 'root',\n})\nexport class PermissionsService {\n    constructor(\n        @Inject(PERMISSIONS) private readonly permissions: Permissions,\n        @Inject(PERMISSIONS_SUPPORT) private permissionsSupported: boolean,\n    ) {}\n\n    state(name: PermissionName): Observable<PermissionState>;\n    state(descriptor: PermissionsQueryArgs): Observable<PermissionState>;\n    state(\n        nameOrDescriptor: PermissionName | PermissionsQueryArgs,\n    ): Observable<PermissionState> {\n        const descriptor: PermissionDescriptor =\n            typeof nameOrDescriptor === 'string'\n                ? {name: nameOrDescriptor}\n                : nameOrDescriptor;\n\n        return new Observable<PermissionState>(subscriber => {\n            if (!this.permissionsSupported) {\n                subscriber.error('Permissions is not supported in your browser');\n\n                return;\n            }\n\n            return from(this.permissions.query(descriptor))\n                .pipe(\n                    switchMap(status =>\n                        fromEvent(status, 'change').pipe(\n                            startWith(null),\n                            map(() => status.state),\n                        ),\n                    ),\n                )\n                .subscribe(subscriber);\n        }).pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n}\n"]}