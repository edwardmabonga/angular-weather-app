{"version":3,"file":"ng-web-apis-permissions.js","sources":["@ng-web-apis/permissions/tokens/permissions.ts","@ng-web-apis/permissions/tokens/permissions-support.ts","@ng-web-apis/permissions/services/permissions.service.ts"],"names":[],"mappings":";;;;;;;;;;;;MAGa,WAAW,GAAG,IAAI,cAAc,CACzC,yDAAyD,EACzD;AACJ,IAAQ,OAAO;AAAO;AAAmB;AAAQ,IAAhC,MAAM,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,CAAA;AACpD,CAAK;AACJ;AAAC;AACC;AAAkC;AAAiD;AAAqJ;AAAI;AAAiB,MCNnP,mBAAmB,GAAG,IAAI,cAAc,CACjD,+BAA+B,EAC/B;AACJ,IAAQ,OAAO;AAAO;AACN;AAAQ,IADP;AACjB,QAAY,OAAO,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AACzC,KAAS,CAAA;AACT,CAAK;AACJ;AAAC;AACC;AAAkC;AAAmD;AAAqJ;AAAI;AAAY,MCChP,kBAAkB;AAC/B;AAAQ;AACa;AAAuC;AAAQ,IADhE,YAC0C,WAAwB,EACzB,oBAA6B;AACxE,QAF4C,gBAAW,GAAX,WAAW,CAAa;AAAC,QAC1B,yBAAoB,GAApB,oBAAoB,CAAS;AAAC,KACnE;AACR;AACO;AAAmC;AAAmB;AACtD,IACH,KAAK,CACD,gBAAuD;AAC7D;AAAyB,cACb,UAAU,GACZ,OAAO,gBAAgB,KAAK,QAAQ;AAChD,cAAkB,EAAC,IAAI,EAAE,gBAAgB,EAAC;AAC1C,cAAkB,gBAAgB;AAClC,QACQ,OAAO,IAAI,UAAU;AAAM;AAC9B;AAAuB;AAAY,QADO,UAAU;AACzD,YAAY,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;AAC5C,gBAAgB,UAAU,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;AACjF,gBACgB,OAAO;AACvB,aAAa;AACb,YACY,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAC3D,iBAAiB,IAAI,CACD,SAAS;AAAM;AACP;AAA2B;AAC1C,YAFiB,MAAM,IACZ,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,IAAI,CAC5B,SAAS,CAAC,IAAI,CAAC,EACf,GAAG;AAAM;AAC1B;AACX,YAFgC,MAAM,MAAM,CAAC,KAAK,EAAC,CAC1B,EACJ,CACJ;AACjB,iBAAiB,SAAS,CAAC,UAAU,CAAC,CAAC;AACvC,SAAS,EAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EAAC,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;AAC9D,KAAK;AACL;8CAtCC,UAAU,SAAC,kBACR,UAAU,EAAE,MAAM,eACrB,2DACI;AAAC;AAAmB;AAEP,YAAyC,WAAW,uBAA7D,MAAM,SAAC,WAAW;AAAS,0CAC3B,MAAM,SAAC,mBAAmB;AAAQ;AAAG;;;;;;;;;;;;kCAO7C;AAAC;AAAa;AAAQ;AACpB;AAAgB;AAAQ,IATnB,yCAA8D;AAAC;AAChE;AAAiB;AAAgB;AAAQ,IAAxC,kDAAkE;AAAC;AAC1E;AAAC;AAAI;AAEwB;AAC7B;AAGD;AAAI;AAAC;AAAI;AACH;AACH;AAIoB;AAAI;AAAC;AACE","sourcesContent":["import {inject, InjectionToken} from '@angular/core';\nimport {NAVIGATOR} from '@ng-web-apis/common';\n\nexport const PERMISSIONS = new InjectionToken<Permissions>(\n    'An abstraction over window.navigator.permissions object',\n    {\n        factory: () => inject(NAVIGATOR).permissions,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\nimport {PERMISSIONS} from './permissions';\n\nexport const PERMISSIONS_SUPPORT = new InjectionToken<boolean>(\n    'Is Permissions API supported?',\n    {\n        factory: () => {\n            return !!inject(PERMISSIONS);\n        },\n    },\n);\n","import {Inject, Injectable} from '@angular/core';\nimport {from, fromEvent, Observable} from 'rxjs';\nimport {map, shareReplay, startWith, switchMap} from 'rxjs/operators';\nimport {PERMISSIONS} from '../tokens/permissions';\nimport {PERMISSIONS_SUPPORT} from '../tokens/permissions-support';\n\nexport type PermissionsQueryArgs = Parameters<typeof Permissions.prototype.query>[0];\n\n// @dynamic\n@Injectable({\n    providedIn: 'root',\n})\nexport class PermissionsService {\n    constructor(\n        @Inject(PERMISSIONS) private readonly permissions: Permissions,\n        @Inject(PERMISSIONS_SUPPORT) private permissionsSupported: boolean,\n    ) {}\n\n    state(name: PermissionName): Observable<PermissionState>;\n    state(descriptor: PermissionsQueryArgs): Observable<PermissionState>;\n    state(\n        nameOrDescriptor: PermissionName | PermissionsQueryArgs,\n    ): Observable<PermissionState> {\n        const descriptor: PermissionDescriptor =\n            typeof nameOrDescriptor === 'string'\n                ? {name: nameOrDescriptor}\n                : nameOrDescriptor;\n\n        return new Observable<PermissionState>(subscriber => {\n            if (!this.permissionsSupported) {\n                subscriber.error('Permissions is not supported in your browser');\n\n                return;\n            }\n\n            return from(this.permissions.query(descriptor))\n                .pipe(\n                    switchMap(status =>\n                        fromEvent(status, 'change').pipe(\n                            startWith(null),\n                            map(() => status.state),\n                        ),\n                    ),\n                )\n                .subscribe(subscriber);\n        }).pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n}\n"]}