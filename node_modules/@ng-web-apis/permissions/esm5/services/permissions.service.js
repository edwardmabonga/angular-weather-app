/**
 * @fileoverview added by tsickle
 * Generated from: services/permissions.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { from, fromEvent, Observable } from 'rxjs';
import { map, shareReplay, startWith, switchMap } from 'rxjs/operators';
import { PERMISSIONS } from '../tokens/permissions';
import { PERMISSIONS_SUPPORT } from '../tokens/permissions-support';
import * as i0 from "@angular/core";
import * as i1 from "../tokens/permissions";
import * as i2 from "../tokens/permissions-support";
// @dynamic
var PermissionsService = /** @class */ (function () {
    function PermissionsService(permissions, permissionsSupported) {
        this.permissions = permissions;
        this.permissionsSupported = permissionsSupported;
    }
    /**
     * @param {?} nameOrDescriptor
     * @return {?}
     */
    PermissionsService.prototype.state = /**
     * @param {?} nameOrDescriptor
     * @return {?}
     */
    function (nameOrDescriptor) {
        var _this = this;
        /** @type {?} */
        var descriptor = typeof nameOrDescriptor === 'string'
            ? { name: nameOrDescriptor }
            : nameOrDescriptor;
        return new Observable((/**
         * @param {?} subscriber
         * @return {?}
         */
        function (subscriber) {
            if (!_this.permissionsSupported) {
                subscriber.error('Permissions is not supported in your browser');
                return;
            }
            return from(_this.permissions.query(descriptor))
                .pipe(switchMap((/**
             * @param {?} status
             * @return {?}
             */
            function (status) {
                return fromEvent(status, 'change').pipe(startWith(null), map((/**
                 * @return {?}
                 */
                function () { return status.state; })));
            })))
                .subscribe(subscriber);
        })).pipe(shareReplay({ bufferSize: 1, refCount: true }));
    };
    PermissionsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    PermissionsService.ctorParameters = function () { return [
        { type: Permissions, decorators: [{ type: Inject, args: [PERMISSIONS,] }] },
        { type: Boolean, decorators: [{ type: Inject, args: [PERMISSIONS_SUPPORT,] }] }
    ]; };
    /** @nocollapse */ PermissionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PermissionsService_Factory() { return new PermissionsService(i0.ɵɵinject(i1.PERMISSIONS), i0.ɵɵinject(i2.PERMISSIONS_SUPPORT)); }, token: PermissionsService, providedIn: "root" });
    return PermissionsService;
}());
export { PermissionsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PermissionsService.prototype.permissions;
    /**
     * @type {?}
     * @private
     */
    PermissionsService.prototype.permissionsSupported;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy13ZWItYXBpcy9wZXJtaXNzaW9ucy8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3Blcm1pc3Npb25zLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RFLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQzs7Ozs7QUFLbEU7SUFJSSw0QkFDMEMsV0FBd0IsRUFDekIsb0JBQTZCO1FBRDVCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3pCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBUztJQUNuRSxDQUFDOzs7OztJQUlKLGtDQUFLOzs7O0lBQUwsVUFDSSxnQkFBdUQ7UUFEM0QsaUJBMEJDOztZQXZCUyxVQUFVLEdBQ1osT0FBTyxnQkFBZ0IsS0FBSyxRQUFRO1lBQ2hDLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBQztZQUMxQixDQUFDLENBQUMsZ0JBQWdCO1FBRTFCLE9BQU8sSUFBSSxVQUFVOzs7O1FBQWtCLFVBQUEsVUFBVTtZQUM3QyxJQUFJLENBQUMsS0FBSSxDQUFDLG9CQUFvQixFQUFFO2dCQUM1QixVQUFVLENBQUMsS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7Z0JBRWpFLE9BQU87YUFDVjtZQUVELE9BQU8sSUFBSSxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUMxQyxJQUFJLENBQ0QsU0FBUzs7OztZQUFDLFVBQUEsTUFBTTtnQkFDWixPQUFBLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUM1QixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ2YsR0FBRzs7O2dCQUFDLGNBQU0sT0FBQSxNQUFNLENBQUMsS0FBSyxFQUFaLENBQVksRUFBQyxDQUMxQjtZQUhELENBR0MsRUFDSixDQUNKO2lCQUNBLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvQixDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7O2dCQXJDSixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQUcwRCxXQUFXLHVCQUE3RCxNQUFNLFNBQUMsV0FBVzs4Q0FDbEIsTUFBTSxTQUFDLG1CQUFtQjs7OzZCQWZuQztDQStDQyxBQXRDRCxJQXNDQztTQW5DWSxrQkFBa0I7Ozs7OztJQUV2Qix5Q0FBOEQ7Ozs7O0lBQzlELGtEQUFrRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7ZnJvbSwgZnJvbUV2ZW50LCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwLCBzaGFyZVJlcGxheSwgc3RhcnRXaXRoLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7UEVSTUlTU0lPTlN9IGZyb20gJy4uL3Rva2Vucy9wZXJtaXNzaW9ucyc7XG5pbXBvcnQge1BFUk1JU1NJT05TX1NVUFBPUlR9IGZyb20gJy4uL3Rva2Vucy9wZXJtaXNzaW9ucy1zdXBwb3J0JztcblxuZXhwb3J0IHR5cGUgUGVybWlzc2lvbnNRdWVyeUFyZ3MgPSBQYXJhbWV0ZXJzPHR5cGVvZiBQZXJtaXNzaW9ucy5wcm90b3R5cGUucXVlcnk+WzBdO1xuXG4vLyBAZHluYW1pY1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgUGVybWlzc2lvbnNTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChQRVJNSVNTSU9OUykgcHJpdmF0ZSByZWFkb25seSBwZXJtaXNzaW9uczogUGVybWlzc2lvbnMsXG4gICAgICAgIEBJbmplY3QoUEVSTUlTU0lPTlNfU1VQUE9SVCkgcHJpdmF0ZSBwZXJtaXNzaW9uc1N1cHBvcnRlZDogYm9vbGVhbixcbiAgICApIHt9XG5cbiAgICBzdGF0ZShuYW1lOiBQZXJtaXNzaW9uTmFtZSk6IE9ic2VydmFibGU8UGVybWlzc2lvblN0YXRlPjtcbiAgICBzdGF0ZShkZXNjcmlwdG9yOiBQZXJtaXNzaW9uc1F1ZXJ5QXJncyk6IE9ic2VydmFibGU8UGVybWlzc2lvblN0YXRlPjtcbiAgICBzdGF0ZShcbiAgICAgICAgbmFtZU9yRGVzY3JpcHRvcjogUGVybWlzc2lvbk5hbWUgfCBQZXJtaXNzaW9uc1F1ZXJ5QXJncyxcbiAgICApOiBPYnNlcnZhYmxlPFBlcm1pc3Npb25TdGF0ZT4ge1xuICAgICAgICBjb25zdCBkZXNjcmlwdG9yOiBQZXJtaXNzaW9uRGVzY3JpcHRvciA9XG4gICAgICAgICAgICB0eXBlb2YgbmFtZU9yRGVzY3JpcHRvciA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICA/IHtuYW1lOiBuYW1lT3JEZXNjcmlwdG9yfVxuICAgICAgICAgICAgICAgIDogbmFtZU9yRGVzY3JpcHRvcjtcblxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8UGVybWlzc2lvblN0YXRlPihzdWJzY3JpYmVyID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5wZXJtaXNzaW9uc1N1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoJ1Blcm1pc3Npb25zIGlzIG5vdCBzdXBwb3J0ZWQgaW4geW91ciBicm93c2VyJyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmcm9tKHRoaXMucGVybWlzc2lvbnMucXVlcnkoZGVzY3JpcHRvcikpXG4gICAgICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaE1hcChzdGF0dXMgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb21FdmVudChzdGF0dXMsICdjaGFuZ2UnKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAoKCkgPT4gc3RhdHVzLnN0YXRlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH0pLnBpcGUoc2hhcmVSZXBsYXkoe2J1ZmZlclNpemU6IDEsIHJlZkNvdW50OiB0cnVlfSkpO1xuICAgIH1cbn1cbiJdfQ==