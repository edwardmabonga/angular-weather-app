{"version":3,"file":"ng-web-apis-common.js.map","sources":["ng://@ng-web-apis/common/tokens/window.ts","ng://@ng-web-apis/common/tokens/performance.ts","ng://@ng-web-apis/common/tokens/animation-frame.ts","ng://@ng-web-apis/common/tokens/css.ts","ng://@ng-web-apis/common/tokens/local-storage.ts","ng://@ng-web-apis/common/tokens/location.ts","ng://@ng-web-apis/common/tokens/navigator.ts","ng://@ng-web-apis/common/tokens/network-information.ts","ng://@ng-web-apis/common/tokens/page-visibility.ts","ng://@ng-web-apis/common/tokens/session-storage.ts","ng://@ng-web-apis/common/tokens/speech-recognition.ts","ng://@ng-web-apis/common/tokens/speech-synthesis.ts","ng://@ng-web-apis/common/tokens/user-agent.ts"],"sourcesContent":["import {DOCUMENT} from '@angular/common';\r\nimport {inject, InjectionToken} from '@angular/core';\r\n\r\nexport const WINDOW = new InjectionToken<Window>(\r\n    'An abstraction over global window object',\r\n    {\r\n        factory: () => {\r\n            const {defaultView} = inject(DOCUMENT);\r\n\r\n            if (!defaultView) {\r\n                throw new Error('Window is not available');\r\n            }\r\n\r\n            return defaultView;\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const PERFORMANCE = new InjectionToken<Performance>(\r\n    'An abstraction over window.performance object',\r\n    {\r\n        factory: () => inject(WINDOW).performance,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {animationFrameScheduler, Observable, of} from 'rxjs';\r\nimport {map, repeat, share} from 'rxjs/operators';\r\nimport {PERFORMANCE} from './performance';\r\n\r\n// interval has bug: https://github.com/ReactiveX/rxjs/issues/4972, scheduled only present in rxjs 6.5+\r\nexport const ANIMATION_FRAME = new InjectionToken<Observable<DOMHighResTimeStamp>>(\r\n    'Shared Observable based on `window.requestAnimationFrame`',\r\n    {\r\n        factory: () => {\r\n            const performanceRef = inject(PERFORMANCE);\r\n\r\n            return of(0, animationFrameScheduler).pipe(\r\n                repeat(),\r\n                map(() => performanceRef.now()),\r\n                share(),\r\n            );\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\n/**\r\n * Use Window['CSS'], this is a workaround to support Angular 6+\r\n */\r\ninterface Css {\r\n    escape(ident: string): string;\r\n    supports(property: string, value: string): boolean;\r\n    supports(conditionText: string): boolean;\r\n}\r\n\r\nexport const CSS = new InjectionToken<Css>('An abstraction over window.CSS object', {\r\n    factory: () =>\r\n        (inject(WINDOW) as any).CSS || {\r\n            escape: v => v,\r\n            supports: () => false,\r\n        },\r\n});\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const LOCAL_STORAGE = new InjectionToken<Storage>(\r\n    'An abstraction over window.localStorage object',\r\n    {\r\n        factory: () => inject(WINDOW).localStorage,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const LOCATION = new InjectionToken<Location>(\r\n    'An abstraction over window.location object',\r\n    {\r\n        factory: () => inject(WINDOW).location,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const NAVIGATOR = new InjectionToken<Navigator>(\r\n    'An abstraction over window.navigator object',\r\n    {\r\n        factory: () => inject(WINDOW).navigator,\r\n    },\r\n);\r\n","/// <reference types=\"network-information-types\" />\r\n\r\nimport {inject, InjectionToken} from '@angular/core';\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const NETWORK_INFORMATION = new InjectionToken<NetworkInformation | null>(\r\n    'An abstraction over window.navigator.connection object',\r\n    {\r\n        factory: () => inject(NAVIGATOR).connection || null,\r\n    },\r\n);\r\n","import {DOCUMENT} from '@angular/common';\r\nimport {inject, InjectionToken} from '@angular/core';\r\nimport {fromEvent, Observable} from 'rxjs';\r\nimport {distinctUntilChanged, map, share, startWith} from 'rxjs/operators';\r\n\r\nexport const PAGE_VISIBILITY = new InjectionToken<Observable<boolean>>(\r\n    'Shared Observable based on `document visibility changed`',\r\n    {\r\n        factory: () => {\r\n            const documentRef = inject(DOCUMENT);\r\n\r\n            return fromEvent(documentRef, 'visibilitychange').pipe(\r\n                startWith(0),\r\n                map(() => !documentRef.hidden),\r\n                distinctUntilChanged(),\r\n                share(),\r\n            );\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const SESSION_STORAGE = new InjectionToken<Storage>(\r\n    'An abstraction over window.sessionStorage object',\r\n    {\r\n        factory: () => inject(WINDOW).sessionStorage,\r\n    },\r\n);\r\n","import {inject, InjectionToken, Type} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const SPEECH_RECOGNITION = new InjectionToken<Type<SpeechRecognition> | null>(\r\n    'An abstraction over SpeechRecognition class',\r\n    {\r\n        factory: () => {\r\n            const windowRef: any = inject(WINDOW);\r\n\r\n            return (\r\n                windowRef.speechRecogniton || windowRef.webkitSpeechRecognition || null\r\n            );\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const SPEECH_SYNTHESIS = new InjectionToken<SpeechSynthesis>(\r\n    'An abstraction over window.speechSynthesis object',\r\n    {\r\n        factory: () => inject(WINDOW).speechSynthesis,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const USER_AGENT = new InjectionToken<string>(\r\n    'An abstraction over window.navigator.userAgent object',\r\n    {\r\n        factory: () => inject(NAVIGATOR).userAgent,\r\n    },\r\n);\r\n"],"names":[],"mappings":"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"}
