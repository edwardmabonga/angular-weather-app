{"version":3,"sources":["ng://@ng-web-apis/common/tokens/window.ts","ng://@ng-web-apis/common/tokens/performance.ts","ng://@ng-web-apis/common/tokens/animation-frame.ts","ng://@ng-web-apis/common/tokens/css.ts","ng://@ng-web-apis/common/tokens/local-storage.ts","ng://@ng-web-apis/common/tokens/location.ts","ng://@ng-web-apis/common/tokens/navigator.ts","ng://@ng-web-apis/common/tokens/network-information.ts","ng://@ng-web-apis/common/tokens/page-visibility.ts","ng://@ng-web-apis/common/tokens/session-storage.ts","ng://@ng-web-apis/common/tokens/speech-recognition.ts","ng://@ng-web-apis/common/tokens/speech-synthesis.ts","ng://@ng-web-apis/common/tokens/user-agent.ts"],"names":["WINDOW","InjectionToken","factory","defaultView","core","inject","common","DOCUMENT","Error","PERFORMANCE","performance","ANIMATION_FRAME","performanceRef","of","animationFrameScheduler","pipe","repeat","map","now","share","CSS","escape","v","supports","LOCAL_STORAGE","localStorage","LOCATION","location","NAVIGATOR","navigator","NETWORK_INFORMATION","connection","PAGE_VISIBILITY","documentRef","fromEvent","startWith","hidden","distinctUntilChanged","SESSION_STORAGE","sessionStorage","SPEECH_RECOGNITION","windowRef","speechRecogniton","webkitSpeechRecognition","SPEECH_SYNTHESIS","speechSynthesis","USER_AGENT","userAgent"],"mappings":"odAGA,IAAaA,EAAS,IAAIC,EAAAA,eACtB,2CACA,CACIC,QAAS,WACE,IAAAC,EAAAC,EAAAC,OAAAC,EAAAC,UAAAJ,YAEP,IAAKA,EACD,MAAM,IAAIK,MAAM,2BAGpB,OAAOL,KCVNM,EAAc,IAAIR,EAAAA,eAC3B,gDACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQU,eCAzBC,EAAkB,IAAIV,EAAAA,eAC/B,4DACA,CACIC,QAAS,eACCU,EAAiBP,EAAAA,OAAOI,GAE9B,OAAOI,EAAAA,GAAG,EAAGC,EAAAA,yBAAyBC,KAClCC,EAAAA,SACAC,EAAAA,IAAI,WAAM,OAAAL,EAAeM,QACzBC,EAAAA,YCHHC,EAAM,IAAInB,EAAAA,eAAoB,wCAAyC,CAChFC,QAAS,WACL,OAACG,EAAAA,OAAOL,GAAgBoB,KAAO,CAC3BC,OAAQ,SAAAC,GAAK,OAAAA,GACbC,SAAU,WAAM,OAAA,OCbfC,EAAgB,IAAIvB,EAAAA,eAC7B,iDACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQyB,gBCHzBC,EAAW,IAAIzB,EAAAA,eACxB,6CACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQ2B,YCHzBC,EAAY,IAAI3B,EAAAA,eACzB,8CACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQ6B,aCDzBC,EAAsB,IAAI7B,EAAAA,eACnC,yDACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOuB,GAAWG,YAAc,QCH1CC,EAAkB,IAAI/B,EAAAA,eAC/B,2DACA,CACIC,QAAS,eACC+B,EAAc5B,EAAAA,OAAOE,EAAAA,UAE3B,OAAO2B,EAAAA,UAAUD,EAAa,oBAAoBlB,KAC9CoB,EAAAA,UAAU,GACVlB,EAAAA,IAAI,WAAM,OAACgB,EAAYG,SACvBC,EAAAA,uBACAlB,EAAAA,YCZHmB,EAAkB,IAAIrC,EAAAA,eAC/B,mDACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQuC,kBCHzBC,EAAqB,IAAIvC,EAAAA,eAClC,8CACA,CACIC,QAAS,eACCuC,EAAiBpC,EAAAA,OAAOL,GAE9B,OACIyC,EAAUC,kBAAoBD,EAAUE,yBAA2B,QCPtEC,EAAmB,IAAI3C,EAAAA,eAChC,oDACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOL,GAAQ6C,mBCHzBC,EAAa,IAAI7C,EAAAA,eAC1B,wDACA,CACIC,QAAS,WAAM,OAAAG,EAAAA,OAAOuB,GAAWmB","sourcesContent":["import {DOCUMENT} from '@angular/common';\r\nimport {inject, InjectionToken} from '@angular/core';\r\n\r\nexport const WINDOW = new InjectionToken<Window>(\r\n    'An abstraction over global window object',\r\n    {\r\n        factory: () => {\r\n            const {defaultView} = inject(DOCUMENT);\r\n\r\n            if (!defaultView) {\r\n                throw new Error('Window is not available');\r\n            }\r\n\r\n            return defaultView;\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const PERFORMANCE = new InjectionToken<Performance>(\r\n    'An abstraction over window.performance object',\r\n    {\r\n        factory: () => inject(WINDOW).performance,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {animationFrameScheduler, Observable, of} from 'rxjs';\r\nimport {map, repeat, share} from 'rxjs/operators';\r\nimport {PERFORMANCE} from './performance';\r\n\r\n// interval has bug: https://github.com/ReactiveX/rxjs/issues/4972, scheduled only present in rxjs 6.5+\r\nexport const ANIMATION_FRAME = new InjectionToken<Observable<DOMHighResTimeStamp>>(\r\n    'Shared Observable based on `window.requestAnimationFrame`',\r\n    {\r\n        factory: () => {\r\n            const performanceRef = inject(PERFORMANCE);\r\n\r\n            return of(0, animationFrameScheduler).pipe(\r\n                repeat(),\r\n                map(() => performanceRef.now()),\r\n                share(),\r\n            );\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\n/**\r\n * Use Window['CSS'], this is a workaround to support Angular 6+\r\n */\r\ninterface Css {\r\n    escape(ident: string): string;\r\n    supports(property: string, value: string): boolean;\r\n    supports(conditionText: string): boolean;\r\n}\r\n\r\nexport const CSS = new InjectionToken<Css>('An abstraction over window.CSS object', {\r\n    factory: () =>\r\n        (inject(WINDOW) as any).CSS || {\r\n            escape: v => v,\r\n            supports: () => false,\r\n        },\r\n});\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const LOCAL_STORAGE = new InjectionToken<Storage>(\r\n    'An abstraction over window.localStorage object',\r\n    {\r\n        factory: () => inject(WINDOW).localStorage,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const LOCATION = new InjectionToken<Location>(\r\n    'An abstraction over window.location object',\r\n    {\r\n        factory: () => inject(WINDOW).location,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const NAVIGATOR = new InjectionToken<Navigator>(\r\n    'An abstraction over window.navigator object',\r\n    {\r\n        factory: () => inject(WINDOW).navigator,\r\n    },\r\n);\r\n","/// <reference types=\"network-information-types\" />\r\n\r\nimport {inject, InjectionToken} from '@angular/core';\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const NETWORK_INFORMATION = new InjectionToken<NetworkInformation | null>(\r\n    'An abstraction over window.navigator.connection object',\r\n    {\r\n        factory: () => inject(NAVIGATOR).connection || null,\r\n    },\r\n);\r\n","import {DOCUMENT} from '@angular/common';\r\nimport {inject, InjectionToken} from '@angular/core';\r\nimport {fromEvent, Observable} from 'rxjs';\r\nimport {distinctUntilChanged, map, share, startWith} from 'rxjs/operators';\r\n\r\nexport const PAGE_VISIBILITY = new InjectionToken<Observable<boolean>>(\r\n    'Shared Observable based on `document visibility changed`',\r\n    {\r\n        factory: () => {\r\n            const documentRef = inject(DOCUMENT);\r\n\r\n            return fromEvent(documentRef, 'visibilitychange').pipe(\r\n                startWith(0),\r\n                map(() => !documentRef.hidden),\r\n                distinctUntilChanged(),\r\n                share(),\r\n            );\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const SESSION_STORAGE = new InjectionToken<Storage>(\r\n    'An abstraction over window.sessionStorage object',\r\n    {\r\n        factory: () => inject(WINDOW).sessionStorage,\r\n    },\r\n);\r\n","import {inject, InjectionToken, Type} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const SPEECH_RECOGNITION = new InjectionToken<Type<SpeechRecognition> | null>(\r\n    'An abstraction over SpeechRecognition class',\r\n    {\r\n        factory: () => {\r\n            const windowRef: any = inject(WINDOW);\r\n\r\n            return (\r\n                windowRef.speechRecogniton || windowRef.webkitSpeechRecognition || null\r\n            );\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {WINDOW} from './window';\r\n\r\nexport const SPEECH_SYNTHESIS = new InjectionToken<SpeechSynthesis>(\r\n    'An abstraction over window.speechSynthesis object',\r\n    {\r\n        factory: () => inject(WINDOW).speechSynthesis,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const USER_AGENT = new InjectionToken<string>(\r\n    'An abstraction over window.navigator.userAgent object',\r\n    {\r\n        factory: () => inject(NAVIGATOR).userAgent,\r\n    },\r\n);\r\n"]}